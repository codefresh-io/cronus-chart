---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "cronus.fullname" . }}
  labels:
    app: {{ template "cronus.name" . }}
    role: {{ template "cronus.role" . }}
    chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  strategy:
    type: Recreate
    rollingUpdate: null
  replicas: 1
  selector:
    matchLabels:
      app: {{ template "cronus.name" . }}
  template:
    metadata:
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/configmap.yaml") . | sha256sum }}
      labels:
        app: {{ template "cronus.name" . }}
        role: {{ template "cronus.role" . }}
        release: {{ .Release.Name }}
        type: {{ .Values.event.type }}
        kind: {{ .Values.event.kind }}
        action: {{ .Values.event.action }}
    spec:
      volumes:
        - name: boltdb-store
          persistentVolumeClaim:
            claimName: {{ include "cronus.pvcName" . }}
      {{- if .Values.global.privateRegistry }}
      imagePullSecrets:
        - name: "{{ .Release.Name }}-{{ .Values.global.codefresh }}-registry"
      {{- end }}
      containers:
        - name: {{ .Chart.Name }}
          {{- if .Values.global.privateRegistry }} 
          image: "{{ .Values.global.dockerRegistry }}{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          {{- else }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          {{- end }}
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - containerPort: {{ .Values.service.internalPort }}
          env:
            {{- if .Values.global.env }}
            {{- range $key, $value := .Values.global.env }}
            - name: {{ $key }}
              value: {{ $value | quote }}
            {{- end}}
            {{- end}}          
            - name: LOG_LEVEL
              value: {{ .Values.logLevel | quote }}
            {{- if ne .Values.logLevel "debug" }}
            - name: GIN_MODE
              value: release
            {{- end }}
            - name: HERMES_SERVICE
              value: {{ .Values.hermesService | default (printf "%s-hermes" .Release.Name) }}
            - name: PORT
              value: {{ .Values.service.internalPort | quote }}
            - name: STORE_FILE
              value: "/var/boltdb/events.db"
            - name: NEWRELIC_LICENSE_KEY
              valueFrom:
                secretKeyRef:
                   name: "{{ .Release.Name }}-{{ .Values.global.codefresh }}"
                   key: newrelic-license-key
          volumeMounts:
            - mountPath: "/var/boltdb"
              name: boltdb-store
          livenessProbe:
            httpGet:
              path: /health
              port: {{ .Values.service.internalPort }}
            initialDelaySeconds: 5
            timeoutSeconds: 3
            periodSeconds: 10
            failureThreshold: 5
          readinessProbe:
            httpGet:
              path: /ping
              port: {{ .Values.service.internalPort }}
            initialDelaySeconds: 5
            timeoutSeconds: 3
            periodSeconds: 10
            failureThreshold: 5
          resources:
{{ toYaml .Values.resources | indent 12 }}
      {{- $nodeSelector := coalesce .Values.nodeSelector .Values.global.storagePodNodeSelector }}
      {{- if $nodeSelector }}
      nodeSelector:
{{ toYaml $nodeSelector | indent 8 }}
      {{- end }}
